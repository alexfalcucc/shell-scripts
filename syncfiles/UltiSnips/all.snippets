# ==================================================================
# GIT
# ==================================================================

snippet @commit
$1${2: (resolve #$3)}
endsnippet


# ==================================================================
# BASH
# ==================================================================

snippet @script
#!/bin/bash
set -euo pipefail

$1
endsnippet


# ==================================================================
# JAVASCRIPT
# ==================================================================

snippet @function
({$1}) => (
  $2
)
endsnippet

snippet @module
export default @function$1
endsnippet

snippet @import
import $1 from '$2$1'
endsnippet

snippet @log
console.log('$1', $1)
endsnippet

snippet @fetch
fetch(payload.lesson.lesson_url, {
  method: 'PUT',
  body: JSON.stringify({}),
  mode: 'cors',
  headers,
})
  .then(response => response.json())
  .then(json => json)
  .catch(error => console.error(error))
endsnippet


# ==================================================================
# JEST
# ==================================================================

snippet @test
import $1 from '.'

test('$2', () => (
  expect($3).${4:toBe}($5)
))
endsnippet


# ==================================================================
# REACT
# ==================================================================

snippet @tag
<${1:div}
  $2
>
  $3
</$1>
endsnippet

snippet @stateless
import React from 'react'

@module$1
endsnippet

snippet @stateful
import React, {Component} from 'react'

export default class $1 extends Component {

  state = {
    $2: $3,
  }

  render() {
    const {$2} = this.state
    const {$4} = this.props
    return (
      @tag$5
    )
  }
}
endsnippet

snippet @callback
import {Component, PropTypes} from 'react'

export default class $1 extends Component {
  
  static propTypes = {
    children: PropTypes.func.isRequired,
  }

  state = {
    $2: $3,
    $4: $5,
  }

  componentWillMount() {
    const {$6} = this.props
    // update state
  }

  render() {
    const {$2, $4} = this.state
    const {children} = this.props
    return children($2, $4)
  }
}
endsnippet

snippet @proptype
$1: PropTypes.$2${3:.isRequired},
endsnippet

snippet @guide
import React from 'react'
import {storiesOf} from '@kadira/storybook'
import faker from 'faker'
import $1 from '.'

storiesOf('$1', module)
  .add('$2', () => (
    @tag$3
  ))
endsnippet

snippet @snapshot
import React from 'react'
import {create} from 'react-test-renderer'
import $1 from '.'

test('$2', () => (
  expect(create(
    @tag$3
  )).toMatchSnapshot()
))
endsnippet

# EGGHEAD SPECIFIC

snippet @request
<Request url='/$1'>
  {({data}) => (
    $2
  )}
</Request>
endsnippet

snippet @lazyrequest
<Request
  ${1:lazy}
  method='$2'
  url='/$3'
	body={{$4}}
>
  {({request, data}) => (
    <a onClick={() => request()}>
      Get data
    </a>
  )}
</Request>
endsnippet

snippet @main
<Main>
  @tag$1
</Main>
endsnippet

snippet @split
<Split
  title='$1'
  main={
    @tag$2
  }
  aside={
    @tag$3
  }
/>
endsnippet

snippet @heading
<Heading level='$1'>
  $2
</Heading>
endsnippet

snippet @anchor
<Anchor url={$1}>
  $2
</Anchor>
endsnippet

snippet @button
<Button onClick={$1}>
  $2
</Button>
endsnippet

snippet @icon
<Icon
  type='$1'
  size='$2'
  className='$3'
/>
endsnippet

snippet @avatar
<Avatar
  name={$1}
  url={$2}
/>
endsnippet

snippet @prompt
<Prompt
  description={$1}
  action={$2}
  route={'/$3'}
/>
endsnippet
